{"name":"Lua1","tagline":"lua and c each call","body":"`lua和c之间的交互：`\r\n\r\nLua 使用一个虚拟栈来和 C 传递值。栈上的的每个元素都是一个 Lua 值（nil，数字，字符串，等等）。          \r\n\r\nLua可以调用C函数的能力将极大的提高Lua的可扩展性和可用性。对于有些和操作系统相关的功能，\r\n或者是对效率要求较高的模块，我们完全可以通过C函数来实现，之后再通过Lua调用指定的C函数。\r\n对于那些可被Lua调用的C函数而言，其接口必须遵循Lua要求的形式，即typedef int (*lua_CFunction)(lua_State* L)。\r\n简单说明一下，该函数类型仅仅包含一个表示Lua环境的指针作为其唯一的参数，实现者可以通过该指针进一步获取Lua代码\r\n中实际传入的参数。返回值是整型，表示该C函数将返回给Lua代码的返回值数量，如果没有返回值，则return 0即可。\r\n需要说明的是，C函数无法直接将真正的返回值返回给Lua代码，而是通过虚拟栈来传递Lua代码和C函数之间的调用参数和返回值的\r\n。这里我们将介绍两种Lua调用C函数的规则。      \r\n\r\n\r\n下面是lua调用c:   \r\n====\r\n```lua\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <lua.hpp>\r\n#include <lauxlib.h>\r\n#include <lualib.h>\r\n\r\n//待Lua调用的C注册函数。\r\nstatic int add2(lua_State* L)\r\n{\r\n    //检查栈中的参数是否合法，1表示Lua调用时的第一个参数(从左到右)，依此类推。\r\n    //如果Lua代码在调用时传递的参数不为number，该函数将报错并终止程序的执行。\r\n    double op1 = luaL_checknumber(L,1);\r\n    double op2 = luaL_checknumber(L,2);\r\n    //将函数的结果压入栈中。如果有多个返回值，可以在这里多次压入栈中。\r\n    lua_pushnumber(L,op1 + op2);\r\n    //返回值用于提示该C函数的返回值数量，即压入栈中的返回值数量。\r\n    return 1;\r\n}\r\n\r\n//另一个待Lua调用的C注册函数。\r\nstatic int sub2(lua_State* L)\r\n{\r\n    double op1 = luaL_checknumber(L,1);\r\n    double op2 = luaL_checknumber(L,2);\r\n    lua_pushnumber(L,op1 - op2);\r\n    return 1;\r\n}\r\n\r\n//此行相当于lua代码，下面函数luaL_dostring就是执行字符串的lua\r\nconst char* testfunc = \"print(add2(1.0,2.0)) print(sub2(20.1,19))\";\r\n\r\nint main()\r\n{\r\n    lua_State* L = luaL_newstate();\r\n    luaL_openlibs(L);\r\n    //将指定的函数注册为Lua的全局函数变量，其中第一个字符串参数为Lua代码\r\n    //在调用C函数时使用的全局函数名，第二个参数为实际C函数的指针。\r\n    lua_register(L, \"add2\", add2);\r\n    lua_register(L, \"sub2\", sub2);\r\n    //在注册完所有的C函数之后，即可在Lua的代码块中使用这些已经注册的C函数了。\r\n    if (luaL_dostring(L,testfunc))\r\n        printf(\"Failed to invoke.\\n\");\r\n    lua_close(L);\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n下面是c调用lua:\r\n====\r\n \r\n\r\nC程序掉用Lua函数例子：\r\n```lua\r\nvoid CCallLua()\r\n{\r\n    // Create a LUA VMachine\r\n    lua_State *L;\r\n\r\n    //L = luaL_newstate();\r\n    L = lua_open();\r\n\r\n    //Load Libraries\r\n    luaL_openlibs(L);\r\n\r\n     // 运行脚本 /\r\n    luaL_dofile(L, \"clua.lua\");\r\n\r\n    lua_getglobal(L,\"Sum\");\r\n\r\n    lua_pushnumber(L,2);//第一个参数\r\n\r\n    lua_pushnumber(L,3);//第二个参数\r\n\r\n    lua_pushnumber(L,4);//第三个参数\r\n\r\n    lua_pcall(L,3,2,0);//3表示参数个数　2表示返回值个数 0表示返回在栈顶的错误消息就和原始错误消息完全一致。\r\n\r\n    double sum=0,ave=0;\r\n\r\n    if(lua_isnumber(L,1))\r\n    {\r\n        sum=lua_tonumber(L,1);\r\n    }\r\n\r\n    if(lua_isnumber(L,2))\r\n    {\r\n        ave=lua_tonumber(L,2);\r\n    }\r\n\r\n    lua_pop(L,2);\r\n\r\n    cout<<\"Sum =\"<<sum\r\n\r\n        <<\"/nAve =\"<<ave<<endl;\r\n\r\n    // 清除Lua\r\n    lua_close(L);\r\n\r\n    getchar();\r\n}\r\n\r\n\r\n\r\n \r\n\r\nLua脚本Clua.lua：\r\n\r\n\r\nfunction Sum(...)\r\n  local s=0\r\n  local num=0     \r\n  for k,v in pairs{...} do\r\n    s = s + v\r\n       num = k\r\n  end\r\n  return s,s/num\r\nend\r\n```\r\n\r\n\r\n* 1 初始化Lua环境：     \r\n Lua_open或者：lua_newstate            \r\n\r\n* 2 加载Lua标准库：  Lua_openlibs(打开所有标准库)    \r\n\r\n 不打开所有库，打开需要的库:   \r\n\r\n  Luaopen_base  luaopen_package  luaopen_string  luaopen_table  luaopen_math ……….    \r\n\r\n       \r\n\r\n* 3 加载Lua和函数    \r\n\r\n luaL_dofile()    \r\n\r\n lua_getglobal()    \r\n\r\n 大小写敏感,名字于Lua脚本的函数名称大小写完全一致    \r\n\r\n \r\n\r\n* 4 压入参数   \r\n\r\n 不同类型采用不同的函数，按照从左往右的顺序依次压栈   \r\n\r\n lua_pushnumber，lua_pushstring，…..    \r\n\r\n \r\n  \r\n* 5 执行函数     \r\n\r\n lua_call, lua_pcall   \r\n   \r\n \r\n\r\n* 6 获取返回值    \r\n\r\n 不同类型使用不同的函数，注意索引，获取前要检查类型      \r\n\r\n 从栈中弹出返回值  lua_pop()    \r\n\r\n* 7 关闭Lua状态机   \r\n\r\n lua_close()   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n欢迎一起交流学习 \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/u/2786211992/home)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n\r\n\r\n","google":"lua and c each call [lua 与c之间的调用]","note":"Don't delete this file! It's used internally to help with page regeneration."}